/**
 * This file was generated by farrow-api
 * Don't modify it manually
 */

import { createApiPipelineWithUrl, ApiInvokeOptions } from 'farrow-api-client'

/**
 * {@label Todo}
 */
export type Todo = {
  /**
   * @remarks todo id
   */
  id: number
  /**
   * @remarks todo content
   */
  content: string
  /**
   * @remarks todo status
   */
  completed: boolean
}

/**
 * {@label AddTodoInput}
 */
export type AddTodoInput = {
  /**
   * @remarks todo content to add
   */
  content: string
}

/**
 * {@label InvalidAddTodoInput}
 */
export type InvalidAddTodoInput = {
  type: 'InvalidAddTodoInput'
  message: string
}

/**
 * {@label AddTodoSuccess}
 */
export type AddTodoSuccess = {
  type: 'AddTodoSuccess'
  /**
   * @remarks a new todo
   */
  todo: Todo
}

/**
 * {@label AddTodoOutput}
 */
export type AddTodoOutput = InvalidAddTodoInput | AddTodoSuccess

/**
 * {@label RemoveTodoInput}
 */
export type RemoveTodoInput = {
  /**
   * @remarks todo id wait for removing
   */
  todoId: number
}

/**
 * {@label TodoIdNotFound}
 */
export type TodoIdNotFound = {
  type: 'TodoIdNotFound'
  /**
   * @remarks invalid todo id
   */
  todoId: number
}

/**
 * {@label RemoveTodoSuccess}
 */
export type RemoveTodoSuccess = {
  type: 'RemoveTodoSuccess'
  /**
   * @remarks todo id that removed
   */
  todoId: number
  /**
   * @remarks current todos
   */
  todos: Todo[]
}

/**
 * {@label UpdateTodoInput}
 */
export type UpdateTodoInput = {
  /**
   * @remarks todo id wait for update
   */
  todoId: number
  /**
   * @remarks new todo content
   */
  content?: string | null | undefined
  /**
   * @remarks new todo status
   */
  completed?: boolean | null | undefined
}

/**
 * {@label UpdateTodoSuccess}
 */
export type UpdateTodoSuccess = {
  type: 'UpdateTodoSuccess'
  /**
   * @remarks todo id that updated
   */
  todoId: number
  /**
   * @remarks current todos
   */
  todos: Todo[]
}

/**
 * {@label UpdateTodoOutput}
 */
export type UpdateTodoOutput = TodoIdNotFound | UpdateTodoSuccess

export const url = 'http://localhost:3003/api/todo'

export const apiPipeline = createApiPipelineWithUrl(url)

export const api = {
  /**
   * @remarks get todos
   */
  getTodos: (input: {}, options?: ApiInvokeOptions) =>
    apiPipeline.invoke({ type: 'Single', path: ['getTodos'], input }, options) as Promise<{
      /**
       * @remarks all todos
       */
      todos: Todo[]
    }>,
  /**
   * @remarks add todo
   */
  addTodo: (input: AddTodoInput, options?: ApiInvokeOptions) =>
    apiPipeline.invoke({ type: 'Single', path: ['addTodo'], input }, options) as Promise<AddTodoOutput>,
  /**
   * @remarks remove todo
   */
  removeTodo: (input: RemoveTodoInput, options?: ApiInvokeOptions) =>
    apiPipeline.invoke({ type: 'Single', path: ['removeTodo'], input }, options) as Promise<
      TodoIdNotFound | RemoveTodoSuccess
    >,
  /**
   * @remarks update todo
   */
  updateTodo: (input: UpdateTodoInput, options?: ApiInvokeOptions) =>
    apiPipeline.invoke({ type: 'Single', path: ['updateTodo'], input }, options) as Promise<UpdateTodoOutput>,
  /**
   * @remarks clear completed
   */
  clearCompleted: (input: {}, options?: ApiInvokeOptions) =>
    apiPipeline.invoke({ type: 'Single', path: ['clearCompleted'], input }, options) as Promise<{
      /**
       * @remarks current todos
       */
      todos: Todo[]
    }>,
}
